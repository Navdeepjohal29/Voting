{"ast":null,"code":"import Web3 from \"web3\";\nimport { USER_ADDRESS, USER_WALLET, NETWORK } from \"../constant/actionTypes\";\nimport { toast } from \"../../Components/Toast/Toast\";\nimport { NETWORK_CHAIN_ID } from \"../../constant\";\nimport { switchNetwork } from \"../../services/common/CustomNetworkService\";\nimport { Web3Service } from \"../../services/common/web3.service\";\n/**\n * Function to check if required wallets installed\n * @param {*} type\n * @returns\n */\n\nconst isWalletInstalled = async type => {\n  const {\n    BinanceChain,\n    web3,\n    ethereum\n  } = window;\n  let result = false;\n\n  if (type === \"METAMASK\") {\n    const isInstalled = Boolean(ethereum && ethereum.isMetaMask);\n\n    if (isInstalled) {\n      result = type;\n    }\n  } else if (type === \"BINANCE\") {\n    const isInstalled = Boolean(BinanceChain && (await BinanceChain.isConnected()));\n\n    if (isInstalled) {\n      result = type;\n    }\n  }\n\n  if (result === \"BINANCE\") {\n    return \"BINANCE_WALLET\";\n  } else if (\"METAMASK\") {\n    return \"METAMASK_WALLET\";\n  } else if (ethereum || web3 || BinanceChain) {\n    return \"TRUST_WALLET\";\n  }\n};\n/**\n * Function to connect to desired wallet\n * @returns\n */\n\n\nexport const connectUsingWallet = type => async dispatch => {\n  const installed = await isWalletInstalled(type);\n\n  try {\n    if (installed) {\n      const {\n        ethereum,\n        BinanceChain\n      } = window;\n      let web3Instance = new Web3(ethereum);\n      const chainId = await web3Instance.eth.getChainId();\n\n      if (chainId !== Number(NETWORK_CHAIN_ID)) {\n        const response = await switchNetwork();\n\n        if (response) {\n          alert(\"Binance network added successfully.Please connect now.\");\n        }\n      } else {\n        let address;\n\n        if (installed === \"METAMASK_WALLET\") {\n          address = await Web3Service.getAccount(type);\n          await dispatch({\n            type: USER_WALLET,\n            payload: \"MetaMask\"\n          });\n          await ethereum.on(\"accountsChanged\", async function (accounts) {\n            address = accounts[0];\n            dispatch({\n              type: USER_ADDRESS,\n              payload: address\n            });\n            window.location.reload();\n          });\n          return dispatch({\n            type: USER_ADDRESS,\n            payload: address\n          });\n        } else if (installed === \"BINANCE_WALLET\") {\n          address = await Web3Service.getAccount(type);\n          await dispatch({\n            type: USER_WALLET,\n            payload: \"BinanceWallet\"\n          });\n          await BinanceChain.on(\"accountsChanged\", async function (accounts) {\n            address = accounts[0];\n            dispatch({\n              type: USER_ADDRESS,\n              payload: address\n            });\n            window.location.reload();\n          });\n          return dispatch({\n            type: USER_ADDRESS,\n            payload: address\n          });\n        } else if (installed === \"TRUST_WALLET\") {\n          const check = Boolean(ethereum && ethereum.isMetaMask || BinanceChain);\n\n          if (!check) {\n            const web3 = await new Web3(window.web3.currentProvider);\n            const accounts = await web3.eth.getAccounts();\n            address = accounts[0];\n            dispatch({\n              type: USER_WALLET,\n              payload: \"TrustWallet\"\n            });\n            dispatch({\n              type: USER_ADDRESS,\n              payload: address\n            });\n            window.location.reload();\n          }\n        } else {\n          return toast.error(\"Please select desired wallet\");\n        }\n      }\n    } else {\n      return toast.error(\"Please install appropriate wallet\");\n    }\n  } catch (error) {\n    return toast.error(error.message);\n  }\n};\nexport const connectTrustWallet = () => async (dispatch, getState) => {\n  try {\n    const {\n      ethereum\n    } = window;\n    const result = Boolean(ethereum && ethereum.isMetaMask);\n\n    if (!result) {\n      const web3 = await new Web3(window.web3.currentProvider);\n      const accounts = await web3.eth.getAccounts();\n      let address = accounts[0];\n      dispatch({\n        type: USER_ADDRESS,\n        payload: address\n      });\n      return dispatch({\n        type: USER_WALLET,\n        payload: \"TrustWallet\"\n      });\n    } else {\n      return toast.error(\"Trust Wallet Not installed!\");\n    }\n  } catch (error) {\n    return toast.error(error.message);\n  }\n};\nexport const disconnectWallet = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_WALLET,\n      payload: \"\"\n    });\n    dispatch({\n      type: USER_ADDRESS,\n      payload: \"\"\n    });\n    return toast.success(\"Disconnected successfully!\");\n  } catch (error) {\n    return toast.error(error.message);\n  }\n};\nexport const setNetworkChnageAction = type => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: NETWORK,\n      payload: type\n    });\n  } catch (error) {\n    return toast.error(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/navdeep/Documents/votingsystem/votingsystem/src/redux/actions/connect.action.js"],"names":["Web3","USER_ADDRESS","USER_WALLET","NETWORK","toast","NETWORK_CHAIN_ID","switchNetwork","Web3Service","isWalletInstalled","type","BinanceChain","web3","ethereum","window","result","isInstalled","Boolean","isMetaMask","isConnected","connectUsingWallet","dispatch","installed","web3Instance","chainId","eth","getChainId","Number","response","alert","address","getAccount","payload","on","accounts","location","reload","check","currentProvider","getAccounts","error","message","connectTrustWallet","getState","disconnectWallet","success","setNetworkChnageAction"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { USER_ADDRESS, USER_WALLET, NETWORK } from \"../constant/actionTypes\";\nimport { toast } from \"../../Components/Toast/Toast\";\nimport { NETWORK_CHAIN_ID } from \"../../constant\";\nimport { switchNetwork } from \"../../services/common/CustomNetworkService\";\nimport { Web3Service } from \"../../services/common/web3.service\";\n\n/**\n * Function to check if required wallets installed\n * @param {*} type\n * @returns\n */\nconst isWalletInstalled = async (type) => {\n\tconst { BinanceChain, web3, ethereum } = window;\n\tlet result = false;\n\tif (type === \"METAMASK\") {\n\t\tconst isInstalled = Boolean(ethereum && ethereum.isMetaMask);\n\t\tif (isInstalled) {\n\t\t\tresult = type;\n\t\t}\n\t} else if (type === \"BINANCE\") {\n\t\tconst isInstalled = Boolean(\n\t\t\tBinanceChain && (await BinanceChain.isConnected())\n\t\t);\n\t\tif (isInstalled) {\n\t\t\tresult = type;\n\t\t}\n\t}\n\tif (result === \"BINANCE\") {\n\t\treturn \"BINANCE_WALLET\";\n\t} else if (\"METAMASK\") {\n\t\treturn \"METAMASK_WALLET\";\n\t} else if (ethereum || web3 || BinanceChain) {\n\t\treturn \"TRUST_WALLET\";\n\t}\n};\n\n/**\n * Function to connect to desired wallet\n * @returns\n */\nexport const connectUsingWallet = (type) => async (dispatch) => {\n\tconst installed = await isWalletInstalled(type);\n\ttry {\n\t\tif (installed) {\n\t\t\tconst { ethereum, BinanceChain } = window;\n\t\t\tlet web3Instance = new Web3(ethereum);\n\t\t\tconst chainId = await web3Instance.eth.getChainId();\n\n\t\t\tif (chainId !== Number(NETWORK_CHAIN_ID)) {\n\t\t\t\tconst response = await switchNetwork();\n\t\t\t\tif (response) {\n\t\t\t\t\talert(\"Binance network added successfully.Please connect now.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet address;\n\t\t\t\tif (installed === \"METAMASK_WALLET\") {\n                    address = await Web3Service.getAccount(type);\n                   await  dispatch({ type: USER_WALLET, payload: \"MetaMask\" });\n\t\t\t\t\tawait ethereum.on(\"accountsChanged\", async function (accounts) {\n\t\t\t\t\t\taddress = accounts[0];\n\t\t\t\t\t\t dispatch({ type: USER_ADDRESS, payload: address });\n\t\t\t\t\t\twindow.location.reload();\n                    });\n                    return dispatch({ type: USER_ADDRESS, payload: address });\n\t\t\t\t} else if (installed === \"BINANCE_WALLET\") {\n                     address = await Web3Service.getAccount(type);\n                    await dispatch({ type: USER_WALLET, payload: \"BinanceWallet\" });\n\t\t\t\t\tawait BinanceChain.on(\"accountsChanged\", async function (accounts) {\n\t\t\t\t\t\taddress = accounts[0];\n\t\t\t\t\t    dispatch({ type: USER_ADDRESS, payload: address });\n\t\t\t\t\t\twindow.location.reload();\n                    });\n                    return dispatch({ type: USER_ADDRESS, payload: address });\n\t\t\t\t} else if (installed === \"TRUST_WALLET\") {\n\t\t\t\t\tconst check = Boolean(\n\t\t\t\t\t\t(ethereum && ethereum.isMetaMask) || BinanceChain\n\t\t\t\t\t);\n\t\t\t\t\tif (!check) {\n\t\t\t\t\t\tconst web3 = await new Web3(window.web3.currentProvider);\n\t\t\t\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\t\t\t\taddress = accounts[0];\n\t\t\t\t\t\tdispatch({ type: USER_WALLET, payload: \"TrustWallet\" });\n\t\t\t\t\t\t dispatch({ type: USER_ADDRESS, payload: address });\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t}\n                } else {\n\t\t            \treturn toast.error(\"Please select desired wallet\");\n                }\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn toast.error(\"Please install appropriate wallet\");\n\t\t}\n\t} catch (error) {\n\t\treturn toast.error(error.message);\n\t}\n};\n\nexport const connectTrustWallet = () => async (dispatch, getState) => {\n\ttry {\n\t\tconst { ethereum } = window;\n\t\tconst result = Boolean(ethereum && ethereum.isMetaMask);\n\t\tif (!result) {\n\t\t\tconst web3 = await new Web3(window.web3.currentProvider);\n\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\tlet address = accounts[0];\n\t\t\tdispatch({ type: USER_ADDRESS, payload: address });\n\t\t\treturn dispatch({ type: USER_WALLET, payload: \"TrustWallet\" });\n\t\t} else {\n\t\t\treturn toast.error(\"Trust Wallet Not installed!\");\n\t\t}\n\t} catch (error) {\n\t\treturn toast.error(error.message);\n\t}\n};\n\nexport const disconnectWallet = () => async (dispatch, getState) => {\n\ttry {\n\t\t dispatch({ type: USER_WALLET, payload: \"\" });\n\t\t dispatch({ type: USER_ADDRESS, payload: \"\" });\n\t\treturn toast.success(\"Disconnected successfully!\");\n\t} catch (error) {\n\t\treturn toast.error(error.message);\n\t}\n};\n\nexport const setNetworkChnageAction = (type) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: NETWORK, payload: type });\n\t} catch (error) {\n\t\treturn toast.error(error.message);\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}