{"ast":null,"code":"import { CHAIN_ID, CHAIN_NAME, RPC_URL, BLOCK_EXPLORE_URL, ICON_URL, CURRENCY_DECIMAL, CURRENCY_NAME, CURRENCY_SYMBOL } from \"../../constant\";\nexport const switchNetwork = async () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: CHAIN_ID\n        }]\n      });\n    } catch (switchError) {\n      if (switchError.code === 4902) {\n        try {\n          const result = await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [{\n              chainId: CHAIN_ID,\n              // A 0x-prefixed hexadecimal string\n              chainName: CHAIN_NAME,\n              rpcUrls: [RPC_URL],\n              blockExplorerUrls: [BLOCK_EXPLORE_URL],\n              iconUrls: [ICON_URL],\n              nativeCurrency: {\n                name: CURRENCY_NAME,\n                symbol: CURRENCY_SYMBOL,\n                // 2-6 characters long\n                decimals: parseInt(CURRENCY_DECIMAL)\n              }\n            }]\n          });\n          return result;\n        } catch (addError) {\n          reject(addError);\n        }\n      }\n\n      reject(switchError);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/navdeep/Documents/votingsystem/votingsystem/src/services/common/CustomNetworkService.js"],"names":["CHAIN_ID","CHAIN_NAME","RPC_URL","BLOCK_EXPLORE_URL","ICON_URL","CURRENCY_DECIMAL","CURRENCY_NAME","CURRENCY_SYMBOL","switchNetwork","Promise","resolve","reject","window","ethereum","request","method","params","chainId","switchError","code","result","chainName","rpcUrls","blockExplorerUrls","iconUrls","nativeCurrency","name","symbol","decimals","parseInt","addError"],"mappings":"AAAA,SACCA,QADD,EAECC,UAFD,EAGCC,OAHD,EAICC,iBAJD,EAKCC,QALD,EAMCC,gBAND,EAOCC,aAPD,EAQCC,eARD,QASO,gBATP;AAWA,OAAO,MAAMC,aAAa,GAAG,YAAY;AACxC,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC7C,QAAI;AACH,YAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAC7BC,QAAAA,MAAM,EAAE,4BADqB;AAE7BC,QAAAA,MAAM,EAAE,CAAC;AAAEC,UAAAA,OAAO,EAAEjB;AAAX,SAAD;AAFqB,OAAxB,CAAN;AAIA,KALD,CAKE,OAAOkB,WAAP,EAAoB;AACrB,UAAIA,WAAW,CAACC,IAAZ,KAAqB,IAAzB,EAA+B;AAC9B,YAAI;AACH,gBAAMC,MAAM,GAAG,MAAMR,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAC5CC,YAAAA,MAAM,EAAE,yBADoC;AAE5CC,YAAAA,MAAM,EAAE,CACP;AACCC,cAAAA,OAAO,EAAEjB,QADV;AACoB;AACnBqB,cAAAA,SAAS,EAAEpB,UAFZ;AAGCqB,cAAAA,OAAO,EAAE,CAACpB,OAAD,CAHV;AAICqB,cAAAA,iBAAiB,EAAE,CAACpB,iBAAD,CAJpB;AAKCqB,cAAAA,QAAQ,EAAE,CAACpB,QAAD,CALX;AAMCqB,cAAAA,cAAc,EAAE;AACfC,gBAAAA,IAAI,EAAEpB,aADS;AAEfqB,gBAAAA,MAAM,EAAEpB,eAFO;AAEU;AACzBqB,gBAAAA,QAAQ,EAAEC,QAAQ,CAACxB,gBAAD;AAHH;AANjB,aADO;AAFoC,WAAxB,CAArB;AAiBA,iBAAOe,MAAP;AACA,SAnBD,CAmBE,OAAOU,QAAP,EAAiB;AAClBnB,UAAAA,MAAM,CAACmB,QAAD,CAAN;AACA;AACD;;AACDnB,MAAAA,MAAM,CAACO,WAAD,CAAN;AACA;AACD,GAjCM,CAAP;AAkCA,CAnCM","sourcesContent":["import {\n\tCHAIN_ID,\n\tCHAIN_NAME,\n\tRPC_URL,\n\tBLOCK_EXPLORE_URL,\n\tICON_URL,\n\tCURRENCY_DECIMAL,\n\tCURRENCY_NAME,\n\tCURRENCY_SYMBOL,\n} from \"../../constant\";\n\nexport const switchNetwork = async () => {\n\treturn new Promise(async (resolve, reject) => {\n\t\ttry {\n\t\t\tawait window.ethereum.request({\n\t\t\t\tmethod: \"wallet_switchEthereumChain\",\n\t\t\t\tparams: [{ chainId: CHAIN_ID }],\n\t\t\t});\n\t\t} catch (switchError) {\n\t\t\tif (switchError.code === 4902) {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = await window.ethereum.request({\n\t\t\t\t\t\tmethod: \"wallet_addEthereumChain\",\n\t\t\t\t\t\tparams: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchainId: CHAIN_ID, // A 0x-prefixed hexadecimal string\n\t\t\t\t\t\t\t\tchainName: CHAIN_NAME,\n\t\t\t\t\t\t\t\trpcUrls: [RPC_URL],\n\t\t\t\t\t\t\t\tblockExplorerUrls: [BLOCK_EXPLORE_URL],\n\t\t\t\t\t\t\t\ticonUrls: [ICON_URL],\n\t\t\t\t\t\t\t\tnativeCurrency: {\n\t\t\t\t\t\t\t\t\tname: CURRENCY_NAME,\n\t\t\t\t\t\t\t\t\tsymbol: CURRENCY_SYMBOL, // 2-6 characters long\n\t\t\t\t\t\t\t\t\tdecimals: parseInt(CURRENCY_DECIMAL),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t\treturn result;\n\t\t\t\t} catch (addError) {\n\t\t\t\t\treject(addError);\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(switchError);\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"module"}