{"ast":null,"code":"import Web3 from \"web3\";\nimport { COMT_TOKEN_CONTRACT, CVP_TOKEN_CONTRACT, VOTING_CONTRACT } from \"../../constant\";\nimport dynamicAbi from '../../abis/DynamicAbi.json';\nimport votingAbi from '../../abis/VotingAbi.json';\n/**\n * Variable declarations\n */\n\nlet web3Instance, dynamicTokenComtInstance, dynamicTokenCvpInstance, votingContractInstance;\n/**\n * End of variable declarations\n */\n\nconst instanceInit = async () => {\n  try {\n    const {\n      ethereum\n    } = window;\n    web3Instance = new Web3(ethereum); //dynamic comt instance\n\n    dynamicTokenComtInstance = new web3Instance.eth.Contract(dynamicAbi, COMT_TOKEN_CONTRACT); //dynamic cvp instance\n\n    dynamicTokenCvpInstance = new web3Instance.eth.Contract(dynamicAbi, CVP_TOKEN_CONTRACT); //voting contract instance\n\n    votingContractInstance = new web3Instance.eth.Contract(votingAbi, VOTING_CONTRACT);\n  } catch (err) {\n    console.error('Error under instanceInit ', err);\n  }\n}; //init instance handler\n\n\ninstanceInit(); //Instance for CVP token contract\n\nconst tokenCvpContractInstanceHandler = async walletType => {\n  try {\n    if (walletType === \"MetaMask\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(dynamicAbi, CVP_TOKEN_CONTRACT);\n    } else if (walletType === \"BinanceWallet\") {\n      let initInstance = await new Web3(window.BinanceChain);\n      return await new initInstance.eth.Contract(dynamicAbi, CVP_TOKEN_CONTRACT);\n    } else if (walletType === \"TrustWallet\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(dynamicAbi, CVP_TOKEN_CONTRACT);\n    } else {\n      if (votingContractInstance) {\n        return votingContractInstance;\n      }\n    }\n  } catch (err) {\n    console.log(\"Error on tokenCvpContractInstanceHandler\", err);\n    throw new Error(\"Error on tokenCvpContractInstanceHandler\");\n  }\n}; //Instance for COMT token contract\n\n\nconst tokenComtContractInstanceHandler = async walletType => {\n  try {\n    if (walletType === \"MetaMask\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(dynamicAbi, COMT_TOKEN_CONTRACT);\n    } else if (walletType === \"BinanceWallet\") {\n      let initInstance = await new Web3(window.BinanceChain);\n      return await new initInstance.eth.Contract(dynamicAbi, COMT_TOKEN_CONTRACT);\n    } else if (walletType === \"TrustWallet\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(dynamicAbi, COMT_TOKEN_CONTRACT);\n    } else {\n      if (votingContractInstance) {\n        return votingContractInstance;\n      }\n    }\n  } catch (err) {\n    console.log(\"Error on tokenComtContractInstanceHandler\", err);\n    throw new Error(\"Error on tokenComtContractInstanceHandler\");\n  }\n}; //Instance for COMT token contract\n\n\nconst votingContractInstanceHandler = async walletType => {\n  try {\n    if (walletType === \"MetaMask\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(votingAbi, VOTING_CONTRACT);\n    } else if (walletType === \"BinanceWallet\") {\n      let initInstance = await new Web3(window.BinanceChain);\n      return await new initInstance.eth.Contract(votingAbi, VOTING_CONTRACT);\n    } else if (walletType === \"TrustWallet\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(votingAbi, VOTING_CONTRACT);\n    } else {\n      if (votingContractInstance) {\n        return votingContractInstance;\n      }\n    }\n  } catch (err) {\n    console.log(\"Error on votingContractInstanceHandler\", err);\n    throw new Error(\"Error on votingContractInstanceHandler\");\n  }\n};\n\nexport const ContractInstanceHandler = {\n  tokenCvpContractInstanceHandler,\n  tokenComtContractInstanceHandler,\n  votingContractInstanceHandler\n};","map":{"version":3,"sources":["/Users/navdeep/Documents/votingsystem/votingsystem/src/services/common/InstanceService.js"],"names":["Web3","COMT_TOKEN_CONTRACT","CVP_TOKEN_CONTRACT","VOTING_CONTRACT","dynamicAbi","votingAbi","web3Instance","dynamicTokenComtInstance","dynamicTokenCvpInstance","votingContractInstance","instanceInit","ethereum","window","eth","Contract","err","console","error","tokenCvpContractInstanceHandler","walletType","initInstance","BinanceChain","log","Error","tokenComtContractInstanceHandler","votingContractInstanceHandler","ContractInstanceHandler"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { COMT_TOKEN_CONTRACT, CVP_TOKEN_CONTRACT, VOTING_CONTRACT } from \"../../constant\";\nimport dynamicAbi from '../../abis/DynamicAbi.json';\nimport votingAbi from '../../abis/VotingAbi.json';\n\n/**\n * Variable declarations\n */\nlet web3Instance, dynamicTokenComtInstance, dynamicTokenCvpInstance, votingContractInstance;\n/**\n * End of variable declarations\n */\n\nconst instanceInit = async () => {\n    try {\n        const { ethereum } = window;\n        web3Instance = new Web3(ethereum);\n\n        //dynamic comt instance\n        dynamicTokenComtInstance = new web3Instance.eth.Contract(dynamicAbi, COMT_TOKEN_CONTRACT);\n        //dynamic cvp instance\n        dynamicTokenCvpInstance = new web3Instance.eth.Contract(dynamicAbi, CVP_TOKEN_CONTRACT);\n        //voting contract instance\n        votingContractInstance = new web3Instance.eth.Contract(votingAbi, VOTING_CONTRACT);\n    } catch (err) {\n        console.error('Error under instanceInit ', err);\n    }\n};\n//init instance handler\ninstanceInit();\n\n\n\n//Instance for CVP token contract\nconst tokenCvpContractInstanceHandler = async (walletType) => {\n  try {\n    if (walletType === \"MetaMask\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(\n        dynamicAbi,\n        CVP_TOKEN_CONTRACT\n      );\n    } else if (walletType === \"BinanceWallet\") {\n      let initInstance = await new Web3(window.BinanceChain);\n      return await new initInstance.eth.Contract(\n        dynamicAbi,\n        CVP_TOKEN_CONTRACT\n      );\n    }else if (walletType === \"TrustWallet\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(\n        dynamicAbi,\n        CVP_TOKEN_CONTRACT\n      );\n    } else {\n      if (votingContractInstance) {\n        return votingContractInstance;\n      }\n    }\n  } catch (err) {\n    console.log(\"Error on tokenCvpContractInstanceHandler\", err);\n    throw new Error(\"Error on tokenCvpContractInstanceHandler\");\n  }\n};\n\n\n\n//Instance for COMT token contract\nconst tokenComtContractInstanceHandler = async (walletType) => {\n  try {\n    if (walletType === \"MetaMask\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(\n        dynamicAbi,\n        COMT_TOKEN_CONTRACT\n      );\n    } else if (walletType === \"BinanceWallet\") {\n      let initInstance = await new Web3(window.BinanceChain);\n      return await new initInstance.eth.Contract(\n        dynamicAbi,\n        COMT_TOKEN_CONTRACT\n      );\n    }else if (walletType === \"TrustWallet\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(\n        dynamicAbi,\n        COMT_TOKEN_CONTRACT\n      );\n    } else {\n      if (votingContractInstance) {\n        return votingContractInstance;\n      }\n    }\n  } catch (err) {\n    console.log(\"Error on tokenComtContractInstanceHandler\", err);\n    throw new Error(\"Error on tokenComtContractInstanceHandler\");\n  }\n};\n\n\n\n//Instance for COMT token contract\nconst votingContractInstanceHandler = async (walletType) => {\n  try {\n    if (walletType === \"MetaMask\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(\n        votingAbi,\n        VOTING_CONTRACT\n      );\n    } else if (walletType === \"BinanceWallet\") {\n      let initInstance = await new Web3(window.BinanceChain);\n      return await new initInstance.eth.Contract(\n         votingAbi,\n        VOTING_CONTRACT\n      );\n    }else if (walletType === \"TrustWallet\") {\n      let initInstance = await new Web3(window.ethereum);\n      return await new initInstance.eth.Contract(\n         votingAbi,\n        VOTING_CONTRACT\n      );\n    } else {\n      if (votingContractInstance) {\n        return votingContractInstance;\n      }\n    }\n  } catch (err) {\n    console.log(\"Error on votingContractInstanceHandler\", err);\n    throw new Error(\"Error on votingContractInstanceHandler\");\n  }\n};\n\n\n\nexport const ContractInstanceHandler = {\n\ttokenCvpContractInstanceHandler,\n    tokenComtContractInstanceHandler,\n    votingContractInstanceHandler\n};\n"]},"metadata":{},"sourceType":"module"}