{"ast":null,"code":"import { ContractInstanceHandler } from './InstanceService';\nimport Web3 from \"web3\";\nimport { RPC_URL, VOTING_CONTRACT } from '../../constant';\nimport dynamicAbi from '../../abis/DynamicAbi.json';\nimport BigNumber from 'big-number/big-number';\n/**\n * Method to get COMT or CVP token symbol, decimals & balance\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const getTokenBalanceService = async (walletType, data) => {\n  let tokenDecimals, tokenBalance, tokenSymbol;\n  return new Promise(async (resolve, reject) => {\n    try {\n      let instance, contract;\n\n      if (walletType === \"MetaMask\") {\n        instance = new Web3(window.ethereum);\n        contract = new instance.eth.Contract(dynamicAbi, data.tokenAddress);\n      } else if (walletType === \"BinanceWallet\") {\n        instance = new Web3(RPC_URL);\n        contract = new instance.eth.Contract(dynamicAbi, data.tokenAddress);\n      } else if (walletType === \"TrustWallet\") {\n        instance = new Web3(window.ethereum);\n        contract = new instance.eth.Contract(dynamicAbi, data.tokenAddress);\n      }\n\n      tokenBalance = await contract.methods.balanceOf(data.walletAddress).call();\n      tokenDecimals = await contract.methods.decimals().call();\n      tokenSymbol = await contract.methods.symbol().call();\n      tokenDecimals = 10 ** tokenDecimals;\n      data = {\n        tokenBalance,\n        tokenDecimals,\n        tokenSymbol\n      };\n      resolve(data);\n    } catch (error) {\n      console.error(\"Error on getTokenBalanceService\", error);\n      reject(error);\n    }\n  });\n};\n/**\n * Method to get creation fee\n * @param {*} walletType\n * @returns\n */\n\nexport const getCreationFeeMethod = async walletType => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const votingContractInstance = await ContractInstanceHandler.votingContractInstanceHandler(walletType);\n      let data = await votingContractInstance.methods.threadCreationFees().call();\n      resolve(data);\n    } catch (error) {\n      console.error(\"Error on getCreationFeeMethod\", error);\n      reject(error);\n    }\n  });\n};\n/**\n * Method to make proposal\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const makeProposalMethod = async (walletType, data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const votingContractInstance = await ContractInstanceHandler.votingContractInstanceHandler(walletType);\n      let gas = await votingContractInstance.methods.createThread(data.id, data.duration).estimateGas({\n        from: data.walletAddress\n      });\n      await votingContractInstance.methods.createThread(data.id, data.duration).send({\n        from: data.walletAddress,\n        gas\n      }).on(\"confirmation\", () => {}).then(res => {\n        resolve(res);\n      });\n    } catch (error) {\n      console.error(\"Error on makeProposalMethod\", error);\n      reject(error);\n    }\n  });\n};\n/**\n * Method to provide approval\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const setApprovalForCreateThreadMethod = async (walletType, walletAddress) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let contractAddress, maxlimit, limit, approval;\n      maxlimit = BigNumber(10).power(40);\n      limit = maxlimit.toString();\n      const comtTokenContractInstance = await ContractInstanceHandler.tokenComtContractInstanceHandler(walletType);\n      contractAddress = VOTING_CONTRACT;\n      let gas = await comtTokenContractInstance.methods.approve(contractAddress, limit).estimateGas({\n        from: walletAddress\n      });\n      approval = await comtTokenContractInstance.methods.approve(contractAddress, limit).send({\n        from: walletAddress,\n        gas\n      });\n      resolve(approval);\n    } catch (error) {\n      console.error(\"Error on setApprovalForCreateThreadMethod\", error);\n      reject(error);\n    }\n  });\n};\n/**\n * Method to get allowance\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const getAllowanceInfo = async (walletType, data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let contractAddress, web3Instance, instance;\n\n      if (walletType === \"MetaMask\") {\n        instance = new Web3(window.ethereum);\n        web3Instance = new instance.eth.Contract(dynamicAbi, data.address);\n      } else if (walletType === \"BinanceWallet\") {\n        instance = new Web3(RPC_URL);\n        web3Instance = new instance.eth.Contract(dynamicAbi, data.address);\n      } else if (walletType === \"TrustWallet\") {\n        instance = new Web3(window.ethereum);\n        web3Instance = new instance.eth.Contract(dynamicAbi, data.address);\n      }\n\n      contractAddress = VOTING_CONTRACT;\n      let allowance = await web3Instance.methods.allowance(data.walletAddress, contractAddress).call();\n      resolve(allowance);\n    } catch (error) {\n      console.error(\"Error on getAllowanceInfo\", error);\n      reject(error);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/navdeep/Documents/votingsystem/votingsystem/src/services/common/CommonMethodService.js"],"names":["ContractInstanceHandler","Web3","RPC_URL","VOTING_CONTRACT","dynamicAbi","BigNumber","getTokenBalanceService","walletType","data","tokenDecimals","tokenBalance","tokenSymbol","Promise","resolve","reject","instance","contract","window","ethereum","eth","Contract","tokenAddress","methods","balanceOf","walletAddress","call","decimals","symbol","error","console","getCreationFeeMethod","votingContractInstance","votingContractInstanceHandler","threadCreationFees","makeProposalMethod","gas","createThread","id","duration","estimateGas","from","send","on","then","res","setApprovalForCreateThreadMethod","contractAddress","maxlimit","limit","approval","power","toString","comtTokenContractInstance","tokenComtContractInstanceHandler","approve","getAllowanceInfo","web3Instance","address","allowance"],"mappings":"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","sourcesContent":["import { ContractInstanceHandler } from './InstanceService';\nimport Web3 from \"web3\";\nimport {RPC_URL, VOTING_CONTRACT } from '../../constant';\nimport dynamicAbi from '../../abis/DynamicAbi.json';\nimport BigNumber from 'big-number/big-number';\n\n/**\n * Method to get COMT or CVP token symbol, decimals & balance\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\nexport const getTokenBalanceService = async (walletType, data) => {\n  let tokenDecimals, tokenBalance, tokenSymbol;\n  return new Promise(async (resolve, reject) => {\n    try {\n      let instance, contract;\n      if (walletType === \"MetaMask\") {\n        instance = new Web3(window.ethereum);\n        contract = new instance.eth.Contract(\n          dynamicAbi,\n          data.tokenAddress\n        );\n      } else if (walletType === \"BinanceWallet\") {\n        instance = new Web3(RPC_URL);\n        contract = new instance.eth.Contract(\n          dynamicAbi,\n          data.tokenAddress\n        );\n      } else if (walletType === \"TrustWallet\") {\n        instance = new Web3(window.ethereum);\n        contract = new instance.eth.Contract(\n          dynamicAbi,\n          data.tokenAddress\n        );\n      }\n       tokenBalance = await contract.methods\n        .balanceOf(data.walletAddress)\n        .call();\n        tokenDecimals = await contract.methods.decimals().call();\n        tokenSymbol = await contract.methods.symbol().call();\n        tokenDecimals = 10 ** tokenDecimals;\n      data = {\n        tokenBalance,\n        tokenDecimals,\n        tokenSymbol,\n      };\n      resolve(data);\n    } catch (error) {\n      console.error(\"Error on getTokenBalanceService\", error);\n      reject(error);\n    }\n  });\n};\n\n\n/**\n * Method to get creation fee\n * @param {*} walletType\n * @returns\n */\nexport const getCreationFeeMethod = async(walletType) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const votingContractInstance = await ContractInstanceHandler.votingContractInstanceHandler(walletType);\n       let data = await votingContractInstance.methods\n        .threadCreationFees()\n        .call();\n        resolve(data);\n    } catch (error) {\n      console.error(\"Error on getCreationFeeMethod\", error);\n      reject(error);\n    }\n  });\n};\n\n/**\n * Method to make proposal\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\nexport const makeProposalMethod = async (walletType, data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const votingContractInstance = await ContractInstanceHandler.votingContractInstanceHandler(walletType);\n      let gas = await votingContractInstance.methods\n        .createThread(data.id, data.duration)\n        .estimateGas({ from: data.walletAddress });\n      await votingContractInstance.methods\n        .createThread(data.id, data.duration)\n        .send({ from: data.walletAddress, gas })\n        .on(\"confirmation\", () => { })\n        .then((res) => {\n          resolve(res);\n        });\n    } catch (error) {\n      console.error(\"Error on makeProposalMethod\", error);\n      reject(error);\n    }\n  });\n};\n\n\n/**\n * Method to provide approval\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\nexport const setApprovalForCreateThreadMethod = async (walletType, walletAddress) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let contractAddress,maxlimit, limit, approval;\n      maxlimit = BigNumber(10).power(40);\n      limit = maxlimit.toString();\n      const comtTokenContractInstance = await ContractInstanceHandler.tokenComtContractInstanceHandler(walletType);\n      contractAddress = VOTING_CONTRACT;\n       let gas = await comtTokenContractInstance.methods\n        .approve(contractAddress, limit)\n        .estimateGas({ from: walletAddress });\n      approval = await comtTokenContractInstance.methods\n        .approve(contractAddress, limit)\n        .send({ from: walletAddress, gas });\n      resolve(approval);\n    } catch (error) {\n      console.error(\"Error on setApprovalForCreateThreadMethod\", error);\n      reject(error);\n    }\n  });\n};\n\n\n/**\n * Method to get allowance\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\nexport const getAllowanceInfo = async (walletType, data) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let contractAddress,web3Instance,instance;\n        if (walletType === \"MetaMask\") {\n          instance = new Web3(window.ethereum);\n          web3Instance = new instance.eth.Contract(\n            dynamicAbi,\n            data.address\n          );\n        } else if (walletType === \"BinanceWallet\") {\n          instance = new Web3(RPC_URL);\n          web3Instance = new instance.eth.Contract(\n            dynamicAbi,\n            data.address\n          );\n        } else if (walletType === \"TrustWallet\") {\n          instance = new Web3(window.ethereum);\n          web3Instance = new instance.eth.Contract(\n            dynamicAbi,\n            data.address\n          );\n        }\n      contractAddress = VOTING_CONTRACT;\n      let allowance = await web3Instance.methods\n        .allowance(data.walletAddress, contractAddress)\n        .call();\n      resolve(allowance);\n    } catch (error) {\n      console.error(\"Error on getAllowanceInfo\", error);\n      reject(error);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}