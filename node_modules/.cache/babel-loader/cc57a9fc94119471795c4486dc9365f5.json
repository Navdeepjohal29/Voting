{"ast":null,"code":"import Web3 from \"web3\";\nimport { toast } from \"../../Components/Toast/Toast\";\n/**\n * @function: callWeb3\n * @returns\n */\n\nconst callWeb3 = async type => {\n  try {\n    const {\n      BinanceChain,\n      ethereum\n    } = window;\n    let web3Object;\n\n    if (type === \"BINANCE\") {\n      if (BinanceChain && (await BinanceChain.isConnected())) {\n        web3Object = new Web3(BinanceChain);\n      } else {\n        toast.info(\"Please install Binance Chain extention\");\n      }\n    } else if (type === \"METAMASK\") {\n      if (ethereum && ethereum.isMetaMask) {\n        web3Object = new Web3(ethereum);\n      } else {\n        toast.info(\"Please install metamask extention\");\n      }\n    } else if (ethereum) {\n      web3Object = new Web3(ethereum);\n    } else if (Web3) {\n      web3Object = new Web3(ethereum);\n    } else {\n      web3Object = new Web3(ethereum);\n    }\n\n    return web3Object;\n  } catch (error) {\n    return error;\n  }\n};\n/**=\n * @function: CallContract\n * @param {JSON Object} abi\n * @param {String} contractAddress\n * @returns\n */\n\n\nconst CallContract = async (walletType, abi, contractAddress) => {\n  try {\n    let contractObject;\n    const web3Object = await callWeb3(walletType);\n    contractObject = new web3Object.eth.Contract(abi, contractAddress);\n    return contractObject;\n  } catch (error) {\n    return error;\n  }\n};\n/**\n * @function: web3\n * @returns: web3Oject\n */\n\n\n_c = CallContract;\n\nconst web3 = async () => {\n  return await callWeb3();\n};\n/**\n * @function: isBnbInsstalled\n * @returns  BINANCE_WALLET, TRUST_WALLET, NONE\n */\n\n\nconst isWalletInstalled = async type => {\n  const {\n    BinanceChain,\n    web3,\n    ethereum\n  } = window;\n  let result = false;\n\n  if (type === \"METAMASK\") {\n    const isInstalled = Boolean(ethereum && ethereum.isMetaMask);\n\n    if (isInstalled) {\n      result = type;\n    }\n  } else if (type === \"BINANCE\") {\n    const isInstalled = Boolean(BinanceChain && (await BinanceChain.isConnected()));\n\n    if (isInstalled) {\n      result = type;\n    }\n  }\n\n  if (result === \"BINANCE\") {\n    return \"BINANCE_WALLET\";\n  } else if (\"METAMASK\") {\n    return \"METAMASK_WALLET\";\n  } else if (ethereum || web3 || BinanceChain) {\n    return \"TRUST_WALLET\";\n  }\n\n  return \"NULL\";\n};\n/*\n * @function: getAccount\n * @returns: account\n */\n\n\nconst getAccount = async type => {\n  const {\n    BinanceChain,\n    ethereum\n  } = window;\n  const result = Boolean(ethereum && ethereum.isMetaMask || BinanceChain);\n  let account;\n\n  if (type === \"BINANCE\") {\n    account = await BinanceChain.enable();\n  } else if (!result && type === \"TRUST_WALLET\") {\n    const web3 = await new Web3(window.web3.currentProvider);\n    const accounts = await web3.eth.getAccounts();\n    let account = accounts[0];\n  } else {\n    await ethereum.on(\"accountsChanged\", async function (accounts) {\n      account = accounts[0];\n    });\n    account = await ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n  }\n\n  return account[0];\n};\n\nexport const Web3Service = {\n  callWeb3,\n  CallContract,\n  isWalletInstalled,\n  getAccount,\n  web3\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"CallContract\");","map":{"version":3,"sources":["/Users/navdeep/Documents/votingsystem/votingsystem/src/services/common/web3.service.js"],"names":["Web3","toast","callWeb3","type","BinanceChain","ethereum","window","web3Object","isConnected","info","isMetaMask","error","CallContract","walletType","abi","contractAddress","contractObject","eth","Contract","web3","isWalletInstalled","result","isInstalled","Boolean","getAccount","account","enable","currentProvider","accounts","getAccounts","on","request","method","Web3Service"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { toast } from \"../../Components/Toast/Toast\";\n\n\n/**\n * @function: callWeb3\n * @returns\n */\n\nconst callWeb3 = async (type) => {\n\ttry {\n\t\tconst { BinanceChain, ethereum } = window;\n\t\tlet web3Object;\n\n\t\tif (type === \"BINANCE\") {\n\t\t\tif (BinanceChain && (await BinanceChain.isConnected())) {\n\t\t\t\tweb3Object = new Web3(BinanceChain);\n\t\t\t} else {\n\t\t\t\ttoast.info(\"Please install Binance Chain extention\");\n\t\t\t}\n\t\t} else if (type === \"METAMASK\") {\n\t\t\tif (ethereum && ethereum.isMetaMask) {\n\t\t\t\tweb3Object = new Web3(ethereum);\n\t\t\t} else {\n\t\t\t\ttoast.info(\"Please install metamask extention\");\n\t\t\t}\n\t\t} else if (ethereum) {\n\t\t\tweb3Object = new Web3(ethereum);\n\t\t} else if (Web3) {\n\t\t\tweb3Object = new Web3(ethereum);\n\t\t} else {\n\t\t\tweb3Object = new Web3(ethereum);\n\t\t}\n\t\treturn web3Object;\n\t} catch (error) {\n\t\treturn error;\n\t}\n};\n\n/**=\n * @function: CallContract\n * @param {JSON Object} abi\n * @param {String} contractAddress\n * @returns\n */\n\nconst CallContract = async (walletType, abi, contractAddress) => {\n\ttry {\n\t\tlet contractObject;\n\t\tconst web3Object = await callWeb3(walletType);\n\t\tcontractObject = new web3Object.eth.Contract(abi, contractAddress);\n\t\treturn contractObject;\n\t} catch (error) {\n\t\treturn error;\n\t}\n};\n\n/**\n * @function: web3\n * @returns: web3Oject\n */\nconst web3 = async () => {\n\treturn await callWeb3();\n};\n\n/**\n * @function: isBnbInsstalled\n * @returns  BINANCE_WALLET, TRUST_WALLET, NONE\n */\nconst isWalletInstalled = async (type) => {\n\tconst { BinanceChain, web3, ethereum } = window;\n\tlet result = false;\n\tif (type === \"METAMASK\") {\n\t\tconst isInstalled = Boolean(ethereum && ethereum.isMetaMask);\n\t\tif (isInstalled) {\n\t\t\tresult = type;\n\t\t}\n\t} else if (type === \"BINANCE\") {\n\t\tconst isInstalled = Boolean(\n\t\t\tBinanceChain && (await BinanceChain.isConnected())\n\t\t);\n\t\tif (isInstalled) {\n\t\t\tresult = type;\n\t\t}\n\t}\n\n\tif (result === \"BINANCE\") {\n\t\treturn \"BINANCE_WALLET\";\n\t} else if (\"METAMASK\") {\n\t\treturn \"METAMASK_WALLET\";\n\t} else if (ethereum || web3 || BinanceChain) {\n\t\treturn \"TRUST_WALLET\";\n\t}\n\treturn \"NULL\";\n};\n\n/*\n * @function: getAccount\n * @returns: account\n */\nconst getAccount = async (type) => {\n\tconst { BinanceChain, ethereum } = window;\n\tconst result = Boolean((ethereum && ethereum.isMetaMask) || BinanceChain);\n\n\tlet account;\n\n\tif (type === \"BINANCE\") {\n\t\taccount = await BinanceChain.enable();\n\t} else if (!result && type === \"TRUST_WALLET\") {\n\t\tconst web3 = await new Web3(window.web3.currentProvider);\n\t\tconst accounts = await web3.eth.getAccounts();\n\t\tlet account = accounts[0];\n\t}else {\n\t\tawait ethereum.on(\"accountsChanged\", async function (accounts) {\n\t\t\taccount = accounts[0];\n\t\t});\n\n\t\taccount = await ethereum.request({ method: \"eth_requestAccounts\" });\n\t}\n\n\treturn account[0];\n};\n\nexport const Web3Service = {\n\tcallWeb3,\n\tCallContract,\n\tisWalletInstalled,\n\tgetAccount,\n\tweb3,\n};\n"]},"metadata":{},"sourceType":"module"}