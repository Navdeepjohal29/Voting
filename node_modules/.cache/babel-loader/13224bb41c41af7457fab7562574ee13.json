{"ast":null,"code":"import { PLATFORM, USER_THEME } from \"../constant/actionTypes\";\nimport { toast } from \"../../Components/Toast/Toast\";\nimport { getAllowanceInfo, getCreationFeeMethod, getTokenBalanceService, makeProposalMethod, setApprovalForCreateThreadMethod } from \"../../services/common/CommonMethodService\";\nimport { setLoader } from \"./loader\";\nexport const setUserPlatform = platform => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PLATFORM,\n      payload: platform\n    });\n  } catch (error) {\n    return toast.error(error.message);\n  }\n};\nexport const setUserTheme = theme => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_THEME,\n      payload: theme\n    });\n  } catch (error) {\n    return toast.error(error.message);\n  }\n};\nexport const getTokenBalanceServiceAction = (walletType, data) => async (dispatch, getState) => {\n  try {\n    dispatch(setLoader(true));\n    let result = await getTokenBalanceService(walletType, data);\n    dispatch(setLoader(false));\n    return result;\n  } catch (error) {\n    //return toast.error(error.message);\n    dispatch(setLoader(false));\n  }\n};\n/**\n * Action to get proposal creation fee\n * @param {*} walletType\n * @returns\n */\n\nexport const getCreationFeeAction = walletType => async dispatch => {\n  try {\n    dispatch(setLoader(true));\n    let result = await getCreationFeeMethod(walletType);\n    dispatch(setLoader(false));\n    return result;\n  } catch (error) {\n    //return toast.error(error.message);\n    dispatch(setLoader(false));\n  }\n};\n/**\n * Action to create proposal thread\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const makeProposalAction = (walletType, data) => async dispatch => {\n  try {\n    dispatch(setLoader(true));\n    let result = await makeProposalMethod(walletType, data);\n    dispatch(setLoader(false));\n    return result;\n  } catch (error) {\n    //return toast.error(error.message);\n    dispatch(setLoader(false));\n    return toast.error(error.message);\n  }\n};\n/**\n * Action to get allowance\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const toGetAllowanceInfoAction = (walletType, data) => async dispatch => {\n  try {\n    dispatch(setLoader(true));\n    let result = await getAllowanceInfo(walletType, data);\n    dispatch(setLoader(false));\n    return result;\n  } catch (error) {\n    //return toast.error(error.message);\n    dispatch(setLoader(false));\n    return toast.error(error.message);\n  }\n};\n/**\n * Action to set approval\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const toSetApprovalForCreateThreadAction = (walletType, walletAddress) => async dispatch => {\n  try {\n    dispatch(setLoader(true));\n    let result = await setApprovalForCreateThreadMethod(walletType, walletAddress);\n    dispatch(setLoader(false));\n    return result;\n  } catch (error) {\n    //return toast.error(error.message);\n    dispatch(setLoader(false));\n    return toast.error(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/navdeep/Documents/votingsystem/votingsystem/src/redux/actions/user.action.js"],"names":["PLATFORM","USER_THEME","toast","getAllowanceInfo","getCreationFeeMethod","getTokenBalanceService","makeProposalMethod","setApprovalForCreateThreadMethod","setLoader","setUserPlatform","platform","dispatch","getState","type","payload","error","message","setUserTheme","theme","getTokenBalanceServiceAction","walletType","data","result","getCreationFeeAction","makeProposalAction","toGetAllowanceInfoAction","toSetApprovalForCreateThreadAction","walletAddress"],"mappings":"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","sourcesContent":["import {\n\tPLATFORM,\n\tUSER_THEME,\n} from \"../constant/actionTypes\";\nimport { toast } from \"../../Components/Toast/Toast\";\nimport {\n\tgetAllowanceInfo,\n\tgetCreationFeeMethod,\n\tgetTokenBalanceService,\n\tmakeProposalMethod,\n\tsetApprovalForCreateThreadMethod\n} from \"../../services/common/CommonMethodService\";\nimport { setLoader } from \"./loader\";\n\nexport const setUserPlatform = (platform) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: PLATFORM, payload: platform });\n\t} catch (error) {\n\t\treturn toast.error(error.message);\n\t}\n};\n\nexport const setUserTheme = (theme) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch({ type: USER_THEME, payload: theme });\n\t} catch (error) {\n\t\treturn toast.error(error.message);\n\t}\n};\n\n\nexport const getTokenBalanceServiceAction = (walletType, data) => async (dispatch, getState) => {\n\ttry {\n\t\tdispatch(setLoader(true));\n\t\tlet result = await getTokenBalanceService(walletType, data);\n\t\tdispatch(setLoader(false));\n\t\treturn result;\n\t} catch (error) {\n\t\t//return toast.error(error.message);\n\t\tdispatch(setLoader(false));\n\t}\n}\n\n/**\n * Action to get proposal creation fee\n * @param {*} walletType\n * @returns\n */\nexport const getCreationFeeAction = (walletType) => async (dispatch) => {\n\ttry {\n\t\tdispatch(setLoader(true));\n\t\tlet result = await getCreationFeeMethod(walletType);\n\t\tdispatch(setLoader(false));\n\t\treturn result;\n\t} catch (error) {\n\t\t//return toast.error(error.message);\n\t\tdispatch(setLoader(false));\n\t}\n};\n\n/**\n * Action to create proposal thread\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const makeProposalAction = (walletType, data) => async (dispatch) => {\n\ttry {\n\t\tdispatch(setLoader(true));\n\t\tlet result = await makeProposalMethod(walletType, data);\n\t\tdispatch(setLoader(false));\n\t\treturn result;\n\t} catch (error) {\n\t\t//return toast.error(error.message);\n\t\tdispatch(setLoader(false));\n\t\treturn toast.error(error.message);\n\t}\n}\n\n/**\n * Action to get allowance\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const toGetAllowanceInfoAction = (walletType, data) => async (dispatch) => {\n\ttry {\n\t\tdispatch(setLoader(true));\n\t\tlet result = await getAllowanceInfo(walletType, data);\n\t\tdispatch(setLoader(false));\n\t\treturn result;\n\t} catch (error) {\n\t\t//return toast.error(error.message);\n\t\tdispatch(setLoader(false));\n\t\treturn toast.error(error.message);\n\t}\n}\n\n/**\n * Action to set approval\n * @param {*} walletType\n * @param {*} data\n * @returns\n */\n\nexport const toSetApprovalForCreateThreadAction = (walletType, walletAddress) => async (dispatch) => {\n\ttry {\n\t\tdispatch(setLoader(true));\n\t\tlet result = await setApprovalForCreateThreadMethod(walletType, walletAddress);\n\t\tdispatch(setLoader(false));\n\t\treturn result;\n\t} catch (error) {\n\t\t//return toast.error(error.message);\n\t\tdispatch(setLoader(false));\n\t\treturn toast.error(error.message);\n\t}\n}"]},"metadata":{},"sourceType":"module"}